// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson785d9294DecodeJsonBench(in *jlexer.Lexer, out *M3ConfTutorialPreset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rseed":
			out.Rseed = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench(out *jwriter.Writer, in M3ConfTutorialPreset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rseed\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Rseed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfTutorialPreset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfTutorialPreset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfTutorialPreset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfTutorialPreset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench(l, v)
}
func easyjson785d9294DecodeJsonBench1(in *jlexer.Lexer, out *M3ConfPos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = int32(in.Int32())
		case "y":
			out.Y = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench1(out *jwriter.Writer, in M3ConfPos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Int32(int32(in.Y))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfPos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfPos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfPos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfPos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench1(l, v)
}
func easyjson785d9294DecodeJsonBench2(in *jlexer.Lexer, out *M3ConfPortalLink) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "side":
			out.Side = M3Dir(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench2(out *jwriter.Writer, in M3ConfPortalLink) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix[1:])
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.Int32(int32(in.Side))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfPortalLink) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfPortalLink) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfPortalLink) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfPortalLink) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench2(l, v)
}
func easyjson785d9294DecodeJsonBench3(in *jlexer.Lexer, out *M3ConfLevelWall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "side":
			out.Side = M3Dir(in.Int32())
		case "type":
			out.Type = M3Walls(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench3(out *jwriter.Writer, in M3ConfLevelWall) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix[1:])
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.Int32(int32(in.Side))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int32(int32(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelWall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelWall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelWall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelWall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench3(l, v)
}
func easyjson785d9294DecodeJsonBench4(in *jlexer.Lexer, out *M3ConfLevelSpecifics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = M3LevelSpecificsType(in.Int32())
		case "sparams":
			if in.IsNull() {
				in.Skip()
				out.Sparams = nil
			} else {
				in.Delim('[')
				if out.Sparams == nil {
					if !in.IsDelim(']') {
						out.Sparams = make([]int32, 0, 16)
					} else {
						out.Sparams = []int32{}
					}
				} else {
					out.Sparams = (out.Sparams)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int32
					v1 = int32(in.Int32())
					out.Sparams = append(out.Sparams, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench4(out *jwriter.Writer, in M3ConfLevelSpecifics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Type))
	}
	{
		const prefix string = ",\"sparams\":"
		out.RawString(prefix)
		if in.Sparams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Sparams {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelSpecifics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelSpecifics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelSpecifics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelSpecifics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench4(l, v)
}
func easyjson785d9294DecodeJsonBench5(in *jlexer.Lexer, out *M3ConfLevelSpawnObj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chip":
			out.Chip = uint32(in.Uint32())
		case "chip_health":
			out.Chip_health = uint32(in.Uint32())
		case "layer0":
			out.Layer0 = uint32(in.Uint32())
		case "layer0_health":
			out.Layer0_health = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench5(out *jwriter.Writer, in M3ConfLevelSpawnObj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chip\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Chip))
	}
	{
		const prefix string = ",\"chip_health\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Chip_health))
	}
	{
		const prefix string = ",\"layer0\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Layer0))
	}
	{
		const prefix string = ",\"layer0_health\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Layer0_health))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelSpawnObj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelSpawnObj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelSpawnObj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelSpawnObj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench5(l, v)
}
func easyjson785d9294DecodeJsonBench6(in *jlexer.Lexer, out *M3ConfLevelSpawnChance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spawner_id":
			out.Spawner_id = uint32(in.Uint32())
		case "obj":
			(out.Obj).UnmarshalEasyJSON(in)
		case "chance":
			out.Chance = int32(in.Int32())
		case "skip_for_init":
			out.Skip_for_init = bool(in.Bool())
		case "max_on_screen":
			out.Max_on_screen = uint32(in.Uint32())
		case "max_to_spawn":
			out.Max_to_spawn = uint32(in.Uint32())
		case "force_period":
			out.Force_period = uint32(in.Uint32())
		case "min_period":
			out.Min_period = uint32(in.Uint32())
		case "max_period":
			out.Max_period = uint32(in.Uint32())
		case "icon":
			out.Icon = M3SpawnIcon(in.Int32())
		case "initial_sequence_chips":
			if in.IsNull() {
				in.Skip()
				out.Initial_sequence_chips = nil
			} else {
				in.Delim('[')
				if out.Initial_sequence_chips == nil {
					if !in.IsDelim(']') {
						out.Initial_sequence_chips = make([]*M3ConfLevelSpawnObj, 0, 8)
					} else {
						out.Initial_sequence_chips = []*M3ConfLevelSpawnObj{}
					}
				} else {
					out.Initial_sequence_chips = (out.Initial_sequence_chips)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *M3ConfLevelSpawnObj
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(M3ConfLevelSpawnObj)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Initial_sequence_chips = append(out.Initial_sequence_chips, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "initial_chips_for_instance":
			out.Initial_chips_for_instance = bool(in.Bool())
		case "min_on_screen":
			out.Min_on_screen = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench6(out *jwriter.Writer, in M3ConfLevelSpawnChance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spawner_id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Spawner_id))
	}
	{
		const prefix string = ",\"obj\":"
		out.RawString(prefix)
		(in.Obj).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chance\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chance))
	}
	{
		const prefix string = ",\"skip_for_init\":"
		out.RawString(prefix)
		out.Bool(bool(in.Skip_for_init))
	}
	{
		const prefix string = ",\"max_on_screen\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Max_on_screen))
	}
	{
		const prefix string = ",\"max_to_spawn\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Max_to_spawn))
	}
	{
		const prefix string = ",\"force_period\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Force_period))
	}
	{
		const prefix string = ",\"min_period\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Min_period))
	}
	{
		const prefix string = ",\"max_period\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Max_period))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Icon))
	}
	{
		const prefix string = ",\"initial_sequence_chips\":"
		out.RawString(prefix)
		if in.Initial_sequence_chips == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Initial_sequence_chips {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"initial_chips_for_instance\":"
		out.RawString(prefix)
		out.Bool(bool(in.Initial_chips_for_instance))
	}
	{
		const prefix string = ",\"min_on_screen\":"
		out.RawString(prefix)
		out.Bool(bool(in.Min_on_screen))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelSpawnChance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelSpawnChance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelSpawnChance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelSpawnChance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench6(l, v)
}
func easyjson785d9294DecodeJsonBench7(in *jlexer.Lexer, out *M3ConfLevelPortal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "side":
			out.Side = M3Dir(in.Int32())
		case "type":
			out.Type = M3Portals(in.Int32())
		case "link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				in.Delim('[')
				if out.Link == nil {
					if !in.IsDelim(']') {
						out.Link = make([]*M3ConfPortalLink, 0, 8)
					} else {
						out.Link = []*M3ConfPortalLink{}
					}
				} else {
					out.Link = (out.Link)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *M3ConfPortalLink
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(M3ConfPortalLink)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Link = append(out.Link, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench7(out *jwriter.Writer, in M3ConfLevelPortal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix[1:])
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.Int32(int32(in.Side))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int32(int32(in.Type))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		if in.Link == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Link {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelPortal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelPortal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelPortal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelPortal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench7(l, v)
}
func easyjson785d9294DecodeJsonBench8(in *jlexer.Lexer, out *M3ConfLevelGoal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint32(in.Uint32())
		case "amount":
			out.Amount = int32(in.Int32())
		case "type":
			out.Type = M3GoalType(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench8(out *jwriter.Writer, in M3ConfLevelGoal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Id))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int32(int32(in.Amount))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int32(int32(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelGoal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelGoal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelGoal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelGoal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench8(l, v)
}
func easyjson785d9294DecodeJsonBench9(in *jlexer.Lexer, out *M3ConfLevelFieldZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "goals":
			if in.IsNull() {
				in.Skip()
				out.Goals = nil
			} else {
				in.Delim('[')
				if out.Goals == nil {
					if !in.IsDelim(']') {
						out.Goals = make([]*M3ConfLevelGoal, 0, 8)
					} else {
						out.Goals = []*M3ConfLevelGoal{}
					}
				} else {
					out.Goals = (out.Goals)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *M3ConfLevelGoal
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(M3ConfLevelGoal)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Goals = append(out.Goals, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "width":
			out.Width = int32(in.Int32())
		case "height":
			out.Height = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench9(out *jwriter.Writer, in M3ConfLevelFieldZone) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"goals\":"
		out.RawString(prefix[1:])
		if in.Goals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Goals {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix)
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int32(int32(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int32(int32(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelFieldZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelFieldZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelFieldZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelFieldZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench9(l, v)
}
func easyjson785d9294DecodeJsonBench10(in *jlexer.Lexer, out *M3ConfLevelField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int32(in.Int32())
		case "height":
			out.Height = int32(in.Int32())
		case "zones":
			if in.IsNull() {
				in.Skip()
				out.Zones = nil
			} else {
				in.Delim('[')
				if out.Zones == nil {
					if !in.IsDelim(']') {
						out.Zones = make([]*M3ConfLevelFieldZone, 0, 8)
					} else {
						out.Zones = []*M3ConfLevelFieldZone{}
					}
				} else {
					out.Zones = (out.Zones)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *M3ConfLevelFieldZone
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(M3ConfLevelFieldZone)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Zones = append(out.Zones, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "next_transition":
			out.Next_transition = M3Dir(in.Int32())
		case "cells":
			if in.IsNull() {
				in.Skip()
				out.Cells = nil
			} else {
				in.Delim('[')
				if out.Cells == nil {
					if !in.IsDelim(']') {
						out.Cells = make([]*M3ConfLevelCell, 0, 8)
					} else {
						out.Cells = []*M3ConfLevelCell{}
					}
				} else {
					out.Cells = (out.Cells)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *M3ConfLevelCell
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(M3ConfLevelCell)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					out.Cells = append(out.Cells, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "walls":
			if in.IsNull() {
				in.Skip()
				out.Walls = nil
			} else {
				in.Delim('[')
				if out.Walls == nil {
					if !in.IsDelim(']') {
						out.Walls = make([]*M3ConfLevelWall, 0, 8)
					} else {
						out.Walls = []*M3ConfLevelWall{}
					}
				} else {
					out.Walls = (out.Walls)[:0]
				}
				for !in.IsDelim(']') {
					var v15 *M3ConfLevelWall
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(M3ConfLevelWall)
						}
						(*v15).UnmarshalEasyJSON(in)
					}
					out.Walls = append(out.Walls, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "portals":
			if in.IsNull() {
				in.Skip()
				out.Portals = nil
			} else {
				in.Delim('[')
				if out.Portals == nil {
					if !in.IsDelim(']') {
						out.Portals = make([]*M3ConfLevelPortal, 0, 8)
					} else {
						out.Portals = []*M3ConfLevelPortal{}
					}
				} else {
					out.Portals = (out.Portals)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *M3ConfLevelPortal
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(M3ConfLevelPortal)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Portals = append(out.Portals, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "barriers":
			if in.IsNull() {
				in.Skip()
				out.Barriers = nil
			} else {
				in.Delim('[')
				if out.Barriers == nil {
					if !in.IsDelim(']') {
						out.Barriers = make([]*M3ConfLevelBarrier, 0, 8)
					} else {
						out.Barriers = []*M3ConfLevelBarrier{}
					}
				} else {
					out.Barriers = (out.Barriers)[:0]
				}
				for !in.IsDelim(']') {
					var v17 *M3ConfLevelBarrier
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(M3ConfLevelBarrier)
						}
						(*v17).UnmarshalEasyJSON(in)
					}
					out.Barriers = append(out.Barriers, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "goals":
			if in.IsNull() {
				in.Skip()
				out.Goals = nil
			} else {
				in.Delim('[')
				if out.Goals == nil {
					if !in.IsDelim(']') {
						out.Goals = make([]*M3ConfLevelGoal, 0, 8)
					} else {
						out.Goals = []*M3ConfLevelGoal{}
					}
				} else {
					out.Goals = (out.Goals)[:0]
				}
				for !in.IsDelim(']') {
					var v18 *M3ConfLevelGoal
					if in.IsNull() {
						in.Skip()
						v18 = nil
					} else {
						if v18 == nil {
							v18 = new(M3ConfLevelGoal)
						}
						(*v18).UnmarshalEasyJSON(in)
					}
					out.Goals = append(out.Goals, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench10(out *jwriter.Writer, in M3ConfLevelField) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int32(int32(in.Height))
	}
	{
		const prefix string = ",\"zones\":"
		out.RawString(prefix)
		if in.Zones == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Zones {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					(*v20).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"next_transition\":"
		out.RawString(prefix)
		out.Int32(int32(in.Next_transition))
	}
	{
		const prefix string = ",\"cells\":"
		out.RawString(prefix)
		if in.Cells == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Cells {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					(*v22).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"walls\":"
		out.RawString(prefix)
		if in.Walls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Walls {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"portals\":"
		out.RawString(prefix)
		if in.Portals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Portals {
				if v25 > 0 {
					out.RawByte(',')
				}
				if v26 == nil {
					out.RawString("null")
				} else {
					(*v26).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"barriers\":"
		out.RawString(prefix)
		if in.Barriers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Barriers {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil {
					out.RawString("null")
				} else {
					(*v28).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"goals\":"
		out.RawString(prefix)
		if in.Goals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Goals {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench10(l, v)
}
func easyjson785d9294DecodeJsonBench11(in *jlexer.Lexer, out *M3ConfLevelCell) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "gravity":
			out.Gravity = M3Dir(in.Int32())
		case "spawner":
			out.Spawner = uint32(in.Uint32())
		case "chip_cover":
			out.Chip_cover = M3Covers(in.Int32())
		case "chip_cover_health":
			out.Chip_cover_health = uint32(in.Uint32())
		case "chip":
			out.Chip = M3Chips(in.Int32())
		case "chip_health":
			out.Chip_health = uint32(in.Uint32())
		case "chip_layer0":
			out.Chip_layer0 = M3ChipsLayered(in.Int32())
		case "chip_layer1":
			out.Chip_layer1 = M3ChipsLayered(in.Int32())
		case "chip_mat":
			out.Chip_mat = M3Mats(in.Int32())
		case "chip_layer0_health":
			out.Chip_layer0_health = uint32(in.Uint32())
		case "chip_blocker":
			out.Chip_blocker = M3ChipsBlocker(in.Int32())
		case "chip_blocker_health":
			out.Chip_blocker_health = uint32(in.Uint32())
		case "chip_blocked":
			out.Chip_blocked = M3ChipsBlocked(in.Int32())
		case "chip_belt":
			out.Chip_belt = M3Belts(in.Int32())
		case "chip_belt_next":
			(out.Chip_belt_next).UnmarshalEasyJSON(in)
		case "protected_from_starting_boosters":
			out.Protected_from_starting_boosters = bool(in.Bool())
		case "chip_marker":
			out.Chip_marker = M3ChipsRider(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench11(out *jwriter.Writer, in M3ConfLevelCell) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix[1:])
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"gravity\":"
		out.RawString(prefix)
		out.Int32(int32(in.Gravity))
	}
	{
		const prefix string = ",\"spawner\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Spawner))
	}
	{
		const prefix string = ",\"chip_cover\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_cover))
	}
	{
		const prefix string = ",\"chip_cover_health\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Chip_cover_health))
	}
	{
		const prefix string = ",\"chip\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip))
	}
	{
		const prefix string = ",\"chip_health\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Chip_health))
	}
	{
		const prefix string = ",\"chip_layer0\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_layer0))
	}
	{
		const prefix string = ",\"chip_layer1\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_layer1))
	}
	{
		const prefix string = ",\"chip_mat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_mat))
	}
	{
		const prefix string = ",\"chip_layer0_health\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Chip_layer0_health))
	}
	{
		const prefix string = ",\"chip_blocker\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_blocker))
	}
	{
		const prefix string = ",\"chip_blocker_health\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Chip_blocker_health))
	}
	{
		const prefix string = ",\"chip_blocked\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_blocked))
	}
	{
		const prefix string = ",\"chip_belt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_belt))
	}
	{
		const prefix string = ",\"chip_belt_next\":"
		out.RawString(prefix)
		(in.Chip_belt_next).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"protected_from_starting_boosters\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected_from_starting_boosters))
	}
	{
		const prefix string = ",\"chip_marker\":"
		out.RawString(prefix)
		out.Int32(int32(in.Chip_marker))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelCell) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelCell) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelCell) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelCell) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench11(l, v)
}
func easyjson785d9294DecodeJsonBench12(in *jlexer.Lexer, out *M3ConfLevelBarrier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "type":
			out.Type = M3Barriers(in.Int32())
		case "width":
			out.Width = int32(in.Int32())
		case "height":
			out.Height = int32(in.Int32())
		case "goal_id":
			out.Goal_id = uint32(in.Uint32())
		case "goal_amount":
			out.Goal_amount = int32(in.Int32())
		case "goal_type":
			out.Goal_type = M3GoalType(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench12(out *jwriter.Writer, in M3ConfLevelBarrier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix[1:])
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int32(int32(in.Type))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int32(int32(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int32(int32(in.Height))
	}
	{
		const prefix string = ",\"goal_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Goal_id))
	}
	{
		const prefix string = ",\"goal_amount\":"
		out.RawString(prefix)
		out.Int32(int32(in.Goal_amount))
	}
	{
		const prefix string = ",\"goal_type\":"
		out.RawString(prefix)
		out.Int32(int32(in.Goal_type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevelBarrier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevelBarrier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevelBarrier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevelBarrier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench12(l, v)
}
func easyjson785d9294DecodeJsonBench13(in *jlexer.Lexer, out *M3ConfLevel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "turns_limit":
			out.Turns_limit = int32(in.Int32())
		case "spawn_chances":
			if in.IsNull() {
				in.Skip()
				out.Spawn_chances = nil
			} else {
				in.Delim('[')
				if out.Spawn_chances == nil {
					if !in.IsDelim(']') {
						out.Spawn_chances = make([]*M3ConfLevelSpawnChance, 0, 8)
					} else {
						out.Spawn_chances = []*M3ConfLevelSpawnChance{}
					}
				} else {
					out.Spawn_chances = (out.Spawn_chances)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *M3ConfLevelSpawnChance
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(M3ConfLevelSpawnChance)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Spawn_chances = append(out.Spawn_chances, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tileset_back":
			out.Tileset_back = string(in.String())
		case "rseeds":
			if in.IsNull() {
				in.Skip()
				out.Rseeds = nil
			} else {
				in.Delim('[')
				if out.Rseeds == nil {
					if !in.IsDelim(']') {
						out.Rseeds = make([]int32, 0, 16)
					} else {
						out.Rseeds = []int32{}
					}
				} else {
					out.Rseeds = (out.Rseeds)[:0]
				}
				for !in.IsDelim(']') {
					var v32 int32
					v32 = int32(in.Int32())
					out.Rseeds = append(out.Rseeds, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "specifics":
			if in.IsNull() {
				in.Skip()
				out.Specifics = nil
			} else {
				in.Delim('[')
				if out.Specifics == nil {
					if !in.IsDelim(']') {
						out.Specifics = make([]*M3ConfLevelSpecifics, 0, 8)
					} else {
						out.Specifics = []*M3ConfLevelSpecifics{}
					}
				} else {
					out.Specifics = (out.Specifics)[:0]
				}
				for !in.IsDelim(']') {
					var v33 *M3ConfLevelSpecifics
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(M3ConfLevelSpecifics)
						}
						(*v33).UnmarshalEasyJSON(in)
					}
					out.Specifics = append(out.Specifics, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*M3ConfLevelField, 0, 8)
					} else {
						out.Fields = []*M3ConfLevelField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *M3ConfLevelField
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(M3ConfLevelField)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.Fields = append(out.Fields, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tutorial":
			if in.IsNull() {
				in.Skip()
				out.Tutorial = nil
			} else {
				in.Delim('[')
				if out.Tutorial == nil {
					if !in.IsDelim(']') {
						out.Tutorial = make([]*M3ConfTutorialPreset, 0, 8)
					} else {
						out.Tutorial = []*M3ConfTutorialPreset{}
					}
				} else {
					out.Tutorial = (out.Tutorial)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *M3ConfTutorialPreset
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(M3ConfTutorialPreset)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					out.Tutorial = append(out.Tutorial, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "difficulty":
			out.Difficulty = M3LevelOfDifficulty(in.Int32())
		case "comment":
			out.Comment = string(in.String())
		case "revision":
			out.Revision = uint32(in.Uint32())
		case "bg_image_index":
			out.Bg_image_index = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonBench13(out *jwriter.Writer, in M3ConfLevel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"turns_limit\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Turns_limit))
	}
	{
		const prefix string = ",\"spawn_chances\":"
		out.RawString(prefix)
		if in.Spawn_chances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Spawn_chances {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					(*v37).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tileset_back\":"
		out.RawString(prefix)
		out.String(string(in.Tileset_back))
	}
	{
		const prefix string = ",\"rseeds\":"
		out.RawString(prefix)
		if in.Rseeds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Rseeds {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"specifics\":"
		out.RawString(prefix)
		if in.Specifics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Specifics {
				if v40 > 0 {
					out.RawByte(',')
				}
				if v41 == nil {
					out.RawString("null")
				} else {
					(*v41).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Fields {
				if v42 > 0 {
					out.RawByte(',')
				}
				if v43 == nil {
					out.RawString("null")
				} else {
					(*v43).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tutorial\":"
		out.RawString(prefix)
		if in.Tutorial == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Tutorial {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					(*v45).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"difficulty\":"
		out.RawString(prefix)
		out.Int32(int32(in.Difficulty))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Revision))
	}
	{
		const prefix string = ",\"bg_image_index\":"
		out.RawString(prefix)
		out.Int32(int32(in.Bg_image_index))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v M3ConfLevel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonBench13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v M3ConfLevel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonBench13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *M3ConfLevel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonBench13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *M3ConfLevel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonBench13(l, v)
}
